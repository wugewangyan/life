<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.3.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">


	<bean id="corePropertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:property/*.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 自动扫描组件-->
	<context:component-scan base-package="com.napoleon.life">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
    </context:component-scan>

	<!-- 启用AspectJ注解支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 事务管理器（编程式事务和声明式事务均需要事务 管理器） -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- For fine-grain transaction, programmatic transaction 编程式事务模版类-->
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	
	<!-- 开启一个基于注解的声明式事务管理器，通知带有@Transactional注解的方法和类 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 配置jdbcTemplate，并注入数据源 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:spring/mybatis-sqlMapConfig.xml"/>
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath*:mapper/**/*Mapper.xml"></property>
	</bean>

	<bean id="baseDao" class="org.mybatis.spring.support.SqlSessionDaoSupport" abstract="true">
		<property name="sqlSessionFactory">
			<ref bean="sqlSessionFactory" />
		</property>
	</bean>
	
	<!-- redis start -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxActive" value="${redis.pool.maxActive}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="minIdle" value="${redis.pool.minIdle}" />
        <property name="maxWait" value="${redis.pool.maxWait}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.pool.testOnReturn}" />
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.ip}"/>
        <constructor-arg index="2" value="${redis.port}"/>
    </bean>

    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.ip}" />
                    <constructor-arg index="1" value="${redis.port}" type="int" />
                </bean>
            </list>
        </constructor-arg>
    </bean>
    
    <bean id = "redisServer" class = "com.napoleon.life.framework.redis.RedisServer">
    	<property name="shardedJedisPool" ref="shardedJedisPool"></property>
    	<property name="jedisPool" ref="jedisPool"></property>
    </bean>
    <!-- redis end -->
    
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha"> 
	    <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.border">no</prop>  
                        <prop key="kaptcha.border.color">105,179,90</prop>  
                        <prop key="kaptcha.textproducer.font.color">red</prop>  
                        <prop key="kaptcha.image.width">250</prop>  
                        <prop key="kaptcha.textproducer.font.size">80</prop>  
                        <prop key="kaptcha.image.height">90</prop>  
                        <prop key="kaptcha.session.key">code</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>  
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>  
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
    
    <bean id = "sqlSource" class = "com.napoleon.life.user.util.SQLSource" init-method="init">
    	<property name="dataSource" ref = "dataSource"></property>
    </bean>
    
    <!-- RabbitMQ 连接服务配置 -->
    <rabbit:connection-factory id = "connectionFactory" host = "localhost" username="guest" password="guest" port="5670"/>
    
    <rabbit:admin connection-factory="connectionFactory"/>
    
    <!-- 队列声明 auth-delete 声明如果该队列没有任何订阅的消费者的话，该队列会被自动删除， 
    			durable表示持久化，exclusive 表示排他队列［该队列仅对首次声明它的连接可见，并在连接断开时自动删除］
    	 RabbitMQ 使用Confirm机制来保证生产者可以感知消息是否被服务器路由到了正确的队列中，如果设置channel为confirm状态，
    	 则通过该channel发送的消息都会被分配一个唯一的ID，然后一旦该消息被正确的路由到匹配的队列中后，服务器返回给生产者一个
    	 Confirm，该Confrim包含该消息的ID，这样生产者就会知道该消息已被正确的分发。该操作是异步进行的，生产者再发送消息以后，即可
    	 继续执行其他的任务，而服务器返回Confirm后，会触发回调函数，生产者在回调函数中处理Confirm消息			
    -->
    <rabbit:queue id="queue_one" durable = "true" auto-delete="false" exclusive="false" name = "queue_one"/>
    <rabbit:queue id="queue_two" durable = "false" auto-delete="false" exclusive="false" name = "queue_two"/>
    <rabbit:queue id="queue_not_durable" durable = "true" auto-delete="false" exclusive="false" name = "queue_not_durable"/>
    <rabbit:queue id="queue_durable" durable = "true" auto-delete="false" exclusive="false" name = "queue_durable"/>
    <rabbit:queue id="queue_two_durable" durable = "true" auto-delete="false" exclusive="false" name = "queue_two_durable"/>
     
    <!-- Exchange 是接受生产者消息并将消息路由到消息队列的组件。binding 和 exchangeType 决定了消息的路由规则
    	 rabbit:binding 的key属性就是生产者在发送消息的RoutingKey
    	 exchangeType 有direct, fanout, topic三种类型，Durable 指定了该Exchange的持久化属性
    	 1)Direct类型：会将消息中的RoutingKey与该Exchange关联的所有Binding中的BindingKey进行比较，如果相等，则发送到对应的Queue中
    	 2)Fanout类型：广播类型，会将消息发送给所有与该Exchange定义过的Binding对应的Queue中
    	 3)Topic类型：正则表达式，对RoutingKey与BindingKey进行正则匹配
     -->
    <rabbit:direct-exchange name="durable-mq-exchange" durable="true" auto-delete="false" id="notdurable-mq-exchange">
    	<rabbit:bindings>
    		<rabbit:binding queue="queue_one" key="queue_one_durable_key"/>
    		<rabbit:binding queue="queue_two" key="queue_two_not_durable_key"/>
    		<rabbit:binding queue="queue_not_durable" key="queue_not_durable_key"/>
    		<rabbit:binding queue="queue_durable" key="queue_durable_key"/>
    		<rabbit:binding queue="queue_two_durable" key="queue_two_durable_key"/>
    	</rabbit:bindings>
    </rabbit:direct-exchange>
    
    <!-- 生产者配置 -->
    <!-- spring amqp 默认的是jackson的一个插件，目的将生产者生产的数据转化喂json存入消息队列
    	 由于fastjson的速度快于jackson，这里替换喂fastjson的一个实现 -->
    <bean id = "jsonMessageConverter" class = "com.napoleon.life.framework.converter.CommonFastjsonMessageConverter"/>
    
    <rabbit:template exchange="durable-mq-exchange" id = "amqpTemplate" 
    	connection-factory="connectionFactory" message-converter="jsonMessageConverter"/>

  
	<!-- 消费者配置 pool-size="1-4" 表示活跃的线程数为1， 最大线程数为4， queue-capacity="128" 表示任务队列的最大容量-->
	<!-- <task:executor id="taskExecutor" pool-size="4-10" queue-capacity="128"/>  
	
	<bean id="queueOneListener" class = "com.napoleon.life.core.listener.LifeRabbitMQListener"/>
	<bean id="queueTwoListener" class = "com.napoleon.life.core.listener.LifeRabbitMQ2Listener"/>

	<rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto" task-executor="taskExecutor" prefetch="1">
		<rabbit:listener ref="queueOneListener" queues="queue_not_durable"/>
		<rabbit:listener ref="queueTwoListener" queues="queue_one"/>
		<rabbit:listener ref="queueTwoListener" queues="queue_two"/>
	</rabbit:listener-container> -->
	
</beans>
